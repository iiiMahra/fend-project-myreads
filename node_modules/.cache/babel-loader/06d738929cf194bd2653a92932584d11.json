{"ast":null,"code":"import _classCallCheck from \"/Users/MAHRA/Desktop/fend-project-myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/MAHRA/Desktop/fend-project-myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/MAHRA/Desktop/fend-project-myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/MAHRA/Desktop/fend-project-myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/MAHRA/Desktop/fend-project-myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/MAHRA/Desktop/fend-project-myreads/src/SearchPage.js\";\nimport React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport Book from './Book';\nimport { Link } from 'react-router-dom';\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SearchPage, _Component);\n\n  function SearchPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SearchPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SearchPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      query: '',\n      searchedBooks: []\n    };\n\n    _this.updateQuery = function (query) {\n      _this.setState({\n        query: query\n      });\n\n      _this.showSearchedBooks(query);\n    };\n\n    _this.showSearchedBooks = function (query) {\n      if (query) {\n        BooksAPI.search(query).then(function (searchedBooks) {\n          // if there is a query and it's not correct the searchedBooks will be an empty array    \n          if (searchedBooks.error) {\n            _this.setState({\n              searchedBooks: []\n            });\n          } // if there is a query and it's correct fetch the array      \n          else {\n              _this.setState({\n                searchedBooks: searchedBooks\n              });\n            }\n        });\n      } // if there is no query the searchedBooks will be an empty array  \n      else {\n          _this.setState({\n            searchedBooks: []\n          });\n        }\n    };\n\n    return _this;\n  }\n\n  _createClass(SearchPage, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      /*if a book is assigned to a shelf on the main page and that book appears on the search page, \n      the correct shelf should be selected on the search page.*/\n      this.state.searchedBooks.map(function (searchedBook) {\n        return _this2.props.books.map(function (book) {\n          searchedBook.id === book.id ? searchedBook.shelf = book.shelf : \"\";\n        });\n      });\n      return React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/\",\n        className: \"close-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        value: this.state.query,\n        onChange: function onChange(event) {\n          return _this2.updateQuery(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.state.searchedBooks.map(function (searchedBook) {\n        return React.createElement(\"li\", {\n          key: searchedBook.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(Book, {\n          book: searchedBook,\n          shelfUpdate: _this2.props.shelfUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }));\n      }))));\n    }\n  }]);\n\n  return SearchPage;\n}(Component);\n\nexport default SearchPage;","map":{"version":3,"sources":["/Users/MAHRA/Desktop/fend-project-myreads/src/SearchPage.js"],"names":["React","Component","BooksAPI","Book","Link","SearchPage","state","query","searchedBooks","updateQuery","setState","showSearchedBooks","search","then","error","map","searchedBook","props","books","book","id","shelf","event","target","value","shelfUpdate"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;;IAIMC,U;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACRC,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,aAAa,EAAE;AAFP,K;;UAKVC,W,GAAc,UAACF,KAAD,EAAW;AACvB,YAAKG,QAAL,CAAc;AAACH,QAAAA,KAAK,EAAEA;AAAR,OAAd;;AACA,YAAKI,iBAAL,CAAuBJ,KAAvB;AAED,K;;UAEHI,iB,GAAoB,UAACJ,KAAD,EAAW;AAC7B,UAAGA,KAAH,EAAU;AACXL,QAAAA,QAAQ,CAACU,MAAT,CAAgBL,KAAhB,EAAuBM,IAAvB,CAA4B,UAACL,aAAD,EAAmB;AAChD;AACM,cAAGA,aAAa,CAACM,KAAjB,EAAwB;AACtB,kBAAKJ,QAAL,CAAc;AAAEF,cAAAA,aAAa,EAAE;AAAjB,aAAd;AACD,WAFD,CAGN;AAHM,eAII;AACF,oBAAKE,QAAL,CAAc;AAACF,gBAAAA,aAAa,EAACA;AAAf,eAAd;AACD;AACF,SATJ;AAUE,OAXD,CAYF;AAZE,WAaK;AACH,gBAAKE,QAAL,CAAc;AAAEF,YAAAA,aAAa,EAAE;AAAjB,WAAd;AACD;AACF,K;;;;;;;6BAEU;AAAA;;AACX;;AAEM,WAAKF,KAAL,CAAWE,aAAX,CAAyBO,GAAzB,CAA6B,UAACC,YAAD,EAAgB;AAC7C,eACE,MAAI,CAACC,KAAL,CAAWC,KAAX,CAAiBH,GAAjB,CAAqB,UAACI,IAAD,EAAQ;AAC3BH,UAAAA,YAAY,CAACI,EAAb,KAAkBD,IAAI,CAACC,EAAvB,GAA4BJ,YAAY,CAACK,KAAb,GAAmBF,IAAI,CAACE,KAApD,GAA0D,EAA1D;AACD,SAFD,CADF;AAKD,OANC;AAOF,aACM;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,SAAS,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,2BAA/B;AACA,QAAA,KAAK,EAAE,KAAKf,KAAL,CAAWC,KADlB;AAEA,QAAA,QAAQ,EAAE,kBAACe,KAAD;AAAA,iBAAW,MAAI,CAACb,WAAL,CAAiBa,KAAK,CAACC,MAAN,CAAaC,KAA9B,CAAX;AAAA,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CADF,EASE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC,KAAKlB,KAAL,CAAWE,aAAX,CAAyBO,GAAzB,CAA6B,UAAAC,YAAY,EAAI;AAC5C,eACC;AAAI,UAAA,GAAG,EAAEA,YAAY,CAACI,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,IAAD;AACE,UAAA,IAAI,EAAEJ,YADR;AAEE,UAAA,WAAW,EAAE,MAAI,CAACC,KAAL,CAAWQ,WAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,CADD;AAQA,OATD,CAFD,CADF,CATF,CADN;AA6BD;;;;EAtEsBxB,S;;AAyEzB,eAAeI,UAAf","sourcesContent":["import React, {Component} from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport Book from './Book'\nimport {Link} from 'react-router-dom'\n\n\n\nclass SearchPage extends Component {\n    state = {\n    query: '',\n    searchedBooks: []\n  }\n\n  updateQuery = (query) => {\n    this.setState({query: query })\n    this.showSearchedBooks(query)\n\n  }\n\nshowSearchedBooks = (query) => {\n  if(query) {\n\tBooksAPI.search(query).then((searchedBooks) => {\n// if there is a query and it's not correct the searchedBooks will be an empty array    \n      if(searchedBooks.error) {\n        this.setState({ searchedBooks: []})\n      }\n// if there is a query and it's correct fetch the array      \n      else{\n        this.setState({searchedBooks:searchedBooks})\n      }\n    })\n  }\n// if there is no query the searchedBooks will be an empty array  \n   else{ \n    this.setState({ searchedBooks: []})\n  }\n}\n\n  render() {\n/*if a book is assigned to a shelf on the main page and that book appears on the search page, \nthe correct shelf should be selected on the search page.*/    \n      this.state.searchedBooks.map((searchedBook)=>{\n      return(\n        this.props.books.map((book)=>{\n          searchedBook.id===book.id ? searchedBook.shelf=book.shelf:\"\";\n        })\n      )\n    })\n    return (\n          <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n              <Link to=\"/\" className=\"close-search\">Close</Link>\n              <div className=\"search-books-input-wrapper\">\n                <input type=\"text\" placeholder=\"Search by title or author\"\n                value={this.state.query}\n                onChange={(event) => this.updateQuery(event.target.value)}/>\n              </div>\n            </div>\n            <div className=\"search-books-results\">\n              <ol className=\"books-grid\">\n              {\n              \tthis.state.searchedBooks.map(searchedBook => {\n              \t\treturn(\n              \t\t\t<li key={searchedBook.id}>\n\t              \t\t\t<Book \n\t              \t\t\t  book={searchedBook}\n\t                \t\t\tshelfUpdate={this.props.shelfUpdate}\n\t              \t\t\t/>\n              \t\t\t</li>\n              \t\t);\n              \t})\n              }\n\n              </ol>\n            </div>\n          </div>\n        )\n  }\n}\n\nexport default SearchPage"]},"metadata":{},"sourceType":"module"}